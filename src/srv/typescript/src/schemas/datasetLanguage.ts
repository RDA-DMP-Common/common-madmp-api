/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Common Machine-Actionable DMP API
 * This API provides access to Data Management Plans in a machine-readable format. You can use this API to perform
automated analysis or other integration. Please note that this API may not give you all information stored in the
system implementing it as this standard is intended as a common baseline among multiple DMP platform vendors.

# Schema extension

This API supports extending the standard by using content negotiation. The MIME types used for content negotiation
*should* follow the vendor tree naming defined in
[RFC 6838 Section 3.2](https://datatracker.ietf.org/doc/html/rfc6838#section-3.2) and make use of the media type
suffixes defined in [RFC6839](https://www.rfc-editor.org/rfc/rfc6839). The vendor prefix should be chosen such that
the vendor is clearly identifiable. For example:

```
application/vnd.com.example.dmp+json
```

Clients *should* send an `Accept` header with their preferred MIME types. The server *must* order the contents of
the `Accept` header correctly and select the standard with the highest client preference.
(See the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Accept) for a detailed
explanation on this header.)

If the client sends no `Accept` header or sends an unqualified `application/json` request, the server *may* select
the "stock" schema represented in this document or may select an extended schema only if the extended schema fully
adheres to this standard with only extra added fields, but no existing fields removed or modified. In this case, the
server *must* respond with the `application/json` content type. Clients *should* not rely on receiving an extended
schema document when sending an `application/json` request and *should* prefer sending a qualified MIME type.

The correct MIME-type for the DMP standard used in this specification is:

```
application/vnd.org.rd-alliance.dmp-common.v1.2+json
```

Client and server implementations *may* agree on a different serialization to JSON, such as XML, by specifying the
corresponding suffix. Clients and servers *must* support JSON serialization.

# Conflict resolution

This API makes use of the `Last-Modified` headers in order to resolve conflicts. When updating a DMP, consider
passing the `Last-Modified` header from the response in the `If-Unmodified-Since` header in the PUT request. If the
DMP has been modified since you last fetched the data, the server will return a 409 header.

Server implementations should always update the modified field of the DMP to the server time on PUT and return it
in the `Last-Modified` header. On PUT, server implementations should compare the `If-Unmodified-Since` header with
the stored modified field.

 * OpenAPI spec version: 0.1.0
 */

/**
 * Language of the dataset expressed using ISO 639-3.
 */
export type DatasetLanguage = typeof DatasetLanguage[keyof typeof DatasetLanguage];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatasetLanguage = {
  aar: 'aar',
  abk: 'abk',
  afr: 'afr',
  aka: 'aka',
  amh: 'amh',
  ara: 'ara',
  arg: 'arg',
  asm: 'asm',
  ava: 'ava',
  ave: 'ave',
  aym: 'aym',
  aze: 'aze',
  bak: 'bak',
  bam: 'bam',
  bel: 'bel',
  ben: 'ben',
  bih: 'bih',
  bis: 'bis',
  bod: 'bod',
  bos: 'bos',
  bre: 'bre',
  bul: 'bul',
  cat: 'cat',
  ces: 'ces',
  cha: 'cha',
  che: 'che',
  chu: 'chu',
  chv: 'chv',
  cor: 'cor',
  cos: 'cos',
  cre: 'cre',
  cym: 'cym',
  dan: 'dan',
  deu: 'deu',
  div: 'div',
  dzo: 'dzo',
  ell: 'ell',
  eng: 'eng',
  epo: 'epo',
  est: 'est',
  eus: 'eus',
  ewe: 'ewe',
  fao: 'fao',
  fas: 'fas',
  fij: 'fij',
  fin: 'fin',
  fra: 'fra',
  fry: 'fry',
  ful: 'ful',
  gla: 'gla',
  gle: 'gle',
  glg: 'glg',
  glv: 'glv',
  grn: 'grn',
  guj: 'guj',
  hat: 'hat',
  hau: 'hau',
  hbs: 'hbs',
  heb: 'heb',
  her: 'her',
  hin: 'hin',
  hmo: 'hmo',
  hrv: 'hrv',
  hun: 'hun',
  hye: 'hye',
  ibo: 'ibo',
  ido: 'ido',
  iii: 'iii',
  iku: 'iku',
  ile: 'ile',
  ina: 'ina',
  ind: 'ind',
  ipk: 'ipk',
  isl: 'isl',
  ita: 'ita',
  jav: 'jav',
  jpn: 'jpn',
  kal: 'kal',
  kan: 'kan',
  kas: 'kas',
  kat: 'kat',
  kau: 'kau',
  kaz: 'kaz',
  khm: 'khm',
  kik: 'kik',
  kin: 'kin',
  kir: 'kir',
  kom: 'kom',
  kon: 'kon',
  kor: 'kor',
  kua: 'kua',
  kur: 'kur',
  lao: 'lao',
  lat: 'lat',
  lav: 'lav',
  lim: 'lim',
  lin: 'lin',
  lit: 'lit',
  ltz: 'ltz',
  lub: 'lub',
  lug: 'lug',
  mah: 'mah',
  mal: 'mal',
  mar: 'mar',
  mkd: 'mkd',
  mlg: 'mlg',
  mlt: 'mlt',
  mon: 'mon',
  mri: 'mri',
  msa: 'msa',
  mya: 'mya',
  nau: 'nau',
  nav: 'nav',
  nbl: 'nbl',
  nde: 'nde',
  ndo: 'ndo',
  nep: 'nep',
  nld: 'nld',
  nno: 'nno',
  nob: 'nob',
  nor: 'nor',
  nya: 'nya',
  oci: 'oci',
  oji: 'oji',
  ori: 'ori',
  orm: 'orm',
  oss: 'oss',
  pan: 'pan',
  pli: 'pli',
  pol: 'pol',
  por: 'por',
  pus: 'pus',
  que: 'que',
  roh: 'roh',
  ron: 'ron',
  run: 'run',
  rus: 'rus',
  sag: 'sag',
  san: 'san',
  sin: 'sin',
  slk: 'slk',
  slv: 'slv',
  sme: 'sme',
  smo: 'smo',
  sna: 'sna',
  snd: 'snd',
  som: 'som',
  sot: 'sot',
  spa: 'spa',
  sqi: 'sqi',
  srd: 'srd',
  srp: 'srp',
  ssw: 'ssw',
  sun: 'sun',
  swa: 'swa',
  swe: 'swe',
  tah: 'tah',
  tam: 'tam',
  tat: 'tat',
  tel: 'tel',
  tgk: 'tgk',
  tgl: 'tgl',
  tha: 'tha',
  tir: 'tir',
  ton: 'ton',
  tsn: 'tsn',
  tso: 'tso',
  tuk: 'tuk',
  tur: 'tur',
  twi: 'twi',
  uig: 'uig',
  ukr: 'ukr',
  urd: 'urd',
  uzb: 'uzb',
  ven: 'ven',
  vie: 'vie',
  vol: 'vol',
  wln: 'wln',
  wol: 'wol',
  xho: 'xho',
  yid: 'yid',
  yor: 'yor',
  zha: 'zha',
  zho: 'zho',
  zul: 'zul',
} as const;

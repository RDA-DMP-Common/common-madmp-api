/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Common Machine-Actionable DMP API
 * This API provides access to Data Management Plans in a machine-readable format. You can use this API to perform
automated analysis or other integration. Please note that this API may not give you all information stored in the
system implementing it as this standard is intended as a common baseline among multiple DMP platform vendors.

# Schema extension

This API supports extending the standard by using content negotiation. The MIME types used for content negotiation
*should* follow the vendor tree naming defined in
[RFC 6838 Section 3.2](https://datatracker.ietf.org/doc/html/rfc6838#section-3.2) and make use of the media type
suffixes defined in [RFC6839](https://www.rfc-editor.org/rfc/rfc6839). The vendor prefix should be chosen such that
the vendor is clearly identifiable. For example:

```
application/vnd.com.example.dmp+json
```

Clients *should* send an `Accept` header with their preferred MIME types. The server *must* order the contents of
the `Accept` header correctly and select the standard with the highest client preference.
(See the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Accept) for a detailed
explanation on this header.)

If the client sends no `Accept` header or sends an unqualified `application/json` request, the server *may* select
the "stock" schema represented in this document or may select an extended schema only if the extended schema fully
adheres to this standard with only extra added fields, but no existing fields removed or modified. In this case, the
server *must* respond with the `application/json` content type. Clients *should* not rely on receiving an extended
schema document when sending an `application/json` request and *should* prefer sending a qualified MIME type.

The correct MIME-type for the DMP standard used in this specification is:

```
application/vnd.org.rd-alliance.dmp-common.v1.2+json
```

Client and server implementations *may* agree on a different serialization to JSON, such as XML, by specifying the
corresponding suffix. Clients and servers *must* support JSON serialization.

# Conflict resolution

This API makes use of the `Last-Modified` headers in order to resolve conflicts. When updating a DMP, consider
passing the `Last-Modified` header from the response in the `If-Unmodified-Since` header in the PUT request. If the
DMP has been modified since you last fetched the data, the server will return a 409 header.

Server implementations should always update the modified field of the DMP to the server time on PUT and return it
in the `Last-Modified` header. On PUT, server implementations should compare the `If-Unmodified-Since` header with
the stored modified field.

 * OpenAPI spec version: 0.1.0
 */
import {
  z as zod
} from 'zod';

import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import {
  Booleanish,
  Certification,
  ContactIDType,
  ContributorIDType,
  CountryCode,
  CurrencyCode,
  DMPIDType,
  DataAccess,
  DatasetIDType,
  FunderIDType,
  FundingStatus,
  GrantIDType,
  LanguageID,
  MetadataStandardIDType,
  PidSystemType
} from './schemas';
import type {
  DMPListResponseResponse,
  DMPWithID
} from './schemas';

/**
 * This endpoint lists all DMPs or allows for creating a filtered list. When filters are provided,
all filter are applied (AND relationship). For filters supporting lists, the individual values are applied
as an OR relationship.

For items accepting more than one value you may pass multiple values by repeating the parameter in the
query string for each item.

 * @summary List/search DMPs
 */
export const listDMPsQueryOffsetDefault = 0;
export const listDMPsQueryOffsetMin = 0;
export const listDMPsQueryCountDefault = 20;
export const listDMPsQueryCountMax = 100;
export const listDMPsQuerySortItemDefault = "created,desc";export const listDMPsQuerySortDefault = ["created,desc"];

export const listDMPsQueryParams = zod.object({
  "offset": zod.number().min(listDMPsQueryOffsetMin).optional().describe('Number of items to skip from the start.'),
  "count": zod.number().min(1).max(listDMPsQueryCountMax).default(listDMPsQueryCountDefault).describe('Number of items to fetch.'),
  "sort[]": zod.array(zod.enum(['title,asc', 'title,desc', 'created,asc', 'created,desc', 'modified,asc', 'modified,desc', 'language,asc', 'language,desc', 'embargo,asc', 'embargo,desc', 'keyword,asc', 'keyword,desc'])).default(listDMPsQuerySortDefault).describe('A list of fields to sort by with the sort order.\n'),
  "created_before": zod.iso.datetime({}).optional(),
  "created_after": zod.iso.datetime({}).optional(),
  "modified_before": zod.iso.datetime({}).optional(),
  "modified_after": zod.iso.datetime({}).optional(),
  "languages[]": zod.array(zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).describe('Language of the metadata expressed using ISO 639-3.')).optional(),
  "contact_ids[]": zod.array(zod.string()).optional(),
  "contributor_ids[]": zod.array(zod.string()).optional(),
  "dataset_ids[]": zod.array(zod.string().describe('Identifier for a dataset')).optional(),
  "metadata_standard_ids[]": zod.array(zod.string().describe('Identifier for the metadata standard used.')).optional(),
  "dmp_ids[]": zod.array(zod.string().describe('Identifier for a DMP')).optional(),
  "funder_ids[]": zod.array(zod.string().describe('Funder ID, recommended to use CrossRef Funder Registry. See: https://www.crossref.org/services/funder-registry/')).optional(),
  "grant_ids[]": zod.array(zod.string().describe('Grant ID')).optional(),
  "query": zod.string().optional(),
  "ethical_issues_exist": zod.boolean().optional(),
  "embargo_before": zod.iso.date().optional(),
  "embargo_after": zod.iso.date().optional()
})

export const listDMPsResponseTotalCountMin = 0;


export const listDMPsResponse = zod.object({
  "total_count": zod.number().min(listDMPsResponseTotalCountMin),
  "items": zod.array(zod.object({
  "dmp": zod.object({
  "contact": zod.object({
  "contact_id": zod.object({
  "identifier": zod.string(),
  "type": zod.enum(['orcid', 'isni', 'openid', 'other']).describe('Identifier type. Allowed values: orcid, isni, openid, other')
}),
  "mbox": zod.email().describe('Contact Person\'s E-mail address'),
  "name": zod.string().describe('Name of the contact person')
}),
  "contributor": zod.array(zod.object({
  "contributor_id": zod.object({
  "identifier": zod.string(),
  "type": zod.enum(['orcid', 'isni', 'openid', 'other']).describe('Identifier type. Allowed values: orcid, isni, openid, other')
}),
  "mbox": zod.email().optional().describe('Contributor Mail address'),
  "name": zod.string().describe('Name of the contributor'),
  "role": zod.array(zod.string()).describe('Type of contributor')
})).optional(),
  "cost": zod.array(zod.object({
  "currency_code": zod.enum(['AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BRL', 'BSD', 'BTN', 'BWP', 'BYN', 'BZD', 'CAD', 'CDF', 'CHF', 'CLP', 'CNY', 'COP', 'CRC', 'CUC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GGP', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS', 'IMP', 'INR', 'IQD', 'IRR', 'ISK', 'JEP', 'JMD', 'JOD', 'JPY', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRU', 'MUR', 'MVR', 'MWK', 'MXN', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLL', 'SOS', 'SPL*', 'SRD', 'STN', 'SVC', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TVD', 'TWD', 'TZS', 'UAH', 'UGX', 'USD', 'UYU', 'UZS', 'VEF', 'VND', 'VUV', 'WST', 'XAF', 'XCD', 'XDR', 'XOF', 'XPF', 'YER', 'ZAR', 'ZMW', 'ZWD']).optional().describe('Allowed values defined by ISO 4217'),
  "description": zod.string().optional().describe('Cost(s) Description'),
  "title": zod.string().describe('Title'),
  "value": zod.number().optional().describe('Value')
})).optional(),
  "created": zod.iso.datetime({}).describe('Date and time of the first version of a DMP. Must not be changed in subsequent DMPs. Encoded using the relevant ISO 8601 Date and Time (with timezone) compliant string'),
  "dataset": zod.array(zod.object({
  "data_quality_assurance": zod.array(zod.string()).optional().describe('Data Quality Assurance'),
  "dataset_id": zod.object({
  "identifier": zod.string().describe('Identifier for a dataset'),
  "type": zod.enum(['handle', 'doi', 'ark', 'url', 'other']).describe('Dataset identifier type. Allowed values: handle, doi, ark, url, other')
}).describe('Dataset ID'),
  "description": zod.string().optional().describe('Description is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "distribution": zod.array(zod.object({
  "access_url": zod.string().optional().describe('A URL of the resource that gives access to a distribution of the dataset. e.g. landing page.'),
  "available_until": zod.iso.date().optional().describe('Indicates how long this distribution will be/ should be available. Encoded using the relevant ISO 8601 Date compliant string.'),
  "byte_size": zod.number().optional().describe('Size in bytes.'),
  "data_access": zod.enum(['open', 'shared', 'closed']).describe('Indicates access mode for data. Allowed values: open, shared, closed'),
  "description": zod.string().optional().describe('Description is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "download_url": zod.optional().describe('The URL of the downloadable file in a given format. E.g. CSV file or RDF file.'),
  "format": zod.array(zod.string()).optional().describe('Format according to: https://www.iana.org/assignments/media-types/media-types.xhtml if appropriate, otherwise use the common name for this format.'),
  "host": zod.object({
  "availability": zod.string().optional().describe('Availability'),
  "backup_frequency": zod.string().optional().describe('Backup Frequency'),
  "backup_type": zod.string().optional().describe('Backup Type'),
  "certified_with": zod.enum(['din31644', 'dini-zertifikat', 'dsa', 'iso16363', 'iso16919', 'trac', 'wds', 'coretrustseal']).optional().describe('Repository certified to a recognised standard. Allowed values: din31644, dini-zertifikat, dsa, iso16363, iso16919, trac, wds, coretrustseal'),
  "description": zod.string().optional().describe('Description'),
  "geo_location": zod.enumoptional().describe('Physical location of the data expressed using ISO 3166-1 country code.'),
  "pid_system": zod.array(zod.enum(['ark', 'arxiv', 'bibcode', 'doi', 'ean13', 'eissn', 'handle', 'igsn', 'isbn', 'issn', 'istc', 'lissn', 'lsid', 'pmid', 'purl', 'upc', 'url', 'urn', 'other'])).optional().describe('PID system(s). Allowed values: ark, arxiv, bibcode, doi, ean13, eissn, handle, igsn, isbn, issn, istc, lissn, lsid, pmid, purl, upc, url, urn, other'),
  "storage_type": zod.string().optional().describe('The type of storage required'),
  "support_versioning": zod.enum(['yes', 'no', 'unknown']).optional().describe('To indicate whether there are ethical issues related to data that this DMP describes. Allowed values: yes, no, unknown'),
  "title": zod.string().describe('Title'),
  "url": zod.describe('The URL of the system hosting a distribution of a dataset')
}).optional().describe('To provide information on quality of service provided by infrastructure (e.g. repository) where data is stored.'),
  "license": zod.array(zod.object({
  "license_ref": zod.describe('Link to license document.'),
  "start_date": zod.iso.date().describe('If date is set in the future, it indicates embargo period. Encoded using the relevant ISO 8601 Date compliant string.')
})).optional().describe('To list all licenses applied to a specific distribution of data.'),
  "title": zod.string().describe('Title is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.')
})).optional().describe('To provide technical information on a specific instance of data.'),
  "is_reused": zod.boolean().optional().describe('Indicates if the dataset is reused, i.e., not produced in project(s) covered by this DMP.'),
  "issued": zod.iso.date().optional().describe('Issued. Encoded using the relevant ISO 8601 Date compliant string.'),
  "keyword": zod.array(zod.string()).optional().describe('Keywords'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).optional().describe('Language of the dataset expressed using ISO 639-3.'),
  "metadata": zod.array(zod.object({
  "description": zod.string().optional().describe('Description'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).describe('Language of the metadata expressed using ISO 639-3.'),
  "metadata_standard_id": zod.object({
  "identifier": zod.string().describe('Identifier for the metadata standard used.'),
  "type": zod.enum(['url', 'other']).describe('Identifier type. Allowed values: url, other')
})
})).optional().describe('To describe metadata standards used.'),
  "personal_data": zod.enum(['yes', 'no', 'unknown']).describe('If any personal data is contained. Allowed values: yes, no, unknown'),
  "preservation_statement": zod.string().optional().describe('Preservation Statement'),
  "security_and_privacy": zod.array(zod.object({
  "description": zod.string().optional().describe('Description'),
  "title": zod.string().describe('Title')
})).optional().describe('To list all issues and requirements related to security and privacy'),
  "sensitive_data": zod.enum(['yes', 'no', 'unknown']).describe('If any sensitive data is contained. Allowed values: yes, no, unknown'),
  "technical_resource": zod.array(zod.object({
  "description": zod.string().optional().describe('Description of the technical resource'),
  "name": zod.string().describe('Name of the technical resource')
})).optional().describe('To list all technical resources needed to implement a DMP'),
  "title": zod.string().describe('Title is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "type": zod.string().optional().describe('If appropriate, type according to: DataCite and/or COAR dictionary. Otherwise use the common name for the type, e.g. raw data, software, survey, etc. https://schema.datacite.org/meta/kernel-4.1/doc/DataCite-MetadataKernel_v4.1.pdf http://vocabularies.coar-repositories.org/pubby/resource_type.html')
})),
  "description": zod.string().optional().describe('To provide any free-form text information on a DMP'),
  "dmp_id": zod.object({
  "identifier": zod.string().describe('Identifier for a DMP'),
  "type": zod.enum(['handle', 'doi', 'ark', 'url', 'other']).describe('The DMP Identifier Type. Allowed values: handle, doi, ark, url, other')
}).describe('Identifier for the DMP itself'),
  "ethical_issues_description": zod.string().optional().describe('To describe ethical issues directly in a DMP'),
  "ethical_issues_exist": zod.enum(['yes', 'no', 'unknown']).describe('To indicate whether there are ethical issues related to data that this DMP describes. Allowed values: yes, no, unknown'),
  "ethical_issues_report": zod.optional().describe('To indicate where a protocol from a meeting with an ethical commitee can be found'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).describe('Language of the metadata expressed using ISO 639-3.'),
  "modified": zod.iso.datetime({}).describe('Must be set each time DMP is modified. Indicates DMP version. Encoded using the relevant ISO 8601 Date and Time (with timezone) compliant string.'),
  "project": zod.array(zod.object({
  "description": zod.string().optional().describe('Project description'),
  "end": zod.iso.date().optional().describe('Project end date. Encoded using the relevant ISO 8601 Date compliant string.'),
  "funding": zod.array(zod.object({
  "funder_id": zod.object({
  "identifier": zod.string().describe('Funder ID, recommended to use CrossRef Funder Registry. See: https://www.crossref.org/services/funder-registry/'),
  "type": zod.enum(['fundref', 'url', 'other']).describe('Identifier type. Allowed values: fundref, url, other')
}).describe('Funder ID of the associated project'),
  "funding_status": zod.enum(['planned', 'applied', 'granted', 'rejected']).optional().describe('To express different phases of project lifecycle. Allowed values: planned, applied, granted, rejected'),
  "grant_id": zod.object({
  "identifier": zod.string().describe('Grant ID'),
  "type": zod.enum(['url', 'other']).describe('Identifier type. Allowed values: url, other')
}).optional().describe('Grant ID of the associated project')
})).optional().describe('Funding related with a project'),
  "start": zod.iso.date().optional().describe('Project start date. Encoded using the relevant ISO 8601 Date compliant string.'),
  "title": zod.string().describe('Project title')
})).optional().describe('Project related to a DMP'),
  "title": zod.string().describe('Title of a DMP')
}).optional()
}).and(zod.object({
  "id": zod.string()
})))
})


/**
 * Create or import a DMP from a JSON-formed DMP object. The implementation may opt to allow the creation of
draft DMPs with formally valid, but incomplete fields. Alternatively, the implementation may reject incomplete
DMPs if it cannot store them.

 * @summary Create a DMP
 */
export const createDMPBody = zod.object({
  "dmp": zod.object({
  "contact": zod.object({
  "contact_id": zod.object({
  "identifier": zod.string(),
  "type": zod.enum(['orcid', 'isni', 'openid', 'other']).describe('Identifier type. Allowed values: orcid, isni, openid, other')
}),
  "mbox": zod.email().describe('Contact Person\'s E-mail address'),
  "name": zod.string().describe('Name of the contact person')
}),
  "contributor": zod.array(zod.object({
  "contributor_id": zod.object({
  "identifier": zod.string(),
  "type": zod.enum(['orcid', 'isni', 'openid', 'other']).describe('Identifier type. Allowed values: orcid, isni, openid, other')
}),
  "mbox": zod.email().optional().describe('Contributor Mail address'),
  "name": zod.string().describe('Name of the contributor'),
  "role": zod.array(zod.string()).describe('Type of contributor')
})).optional(),
  "cost": zod.array(zod.object({
  "currency_code": zod.enum(['AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BRL', 'BSD', 'BTN', 'BWP', 'BYN', 'BZD', 'CAD', 'CDF', 'CHF', 'CLP', 'CNY', 'COP', 'CRC', 'CUC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GGP', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS', 'IMP', 'INR', 'IQD', 'IRR', 'ISK', 'JEP', 'JMD', 'JOD', 'JPY', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRU', 'MUR', 'MVR', 'MWK', 'MXN', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLL', 'SOS', 'SPL*', 'SRD', 'STN', 'SVC', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TVD', 'TWD', 'TZS', 'UAH', 'UGX', 'USD', 'UYU', 'UZS', 'VEF', 'VND', 'VUV', 'WST', 'XAF', 'XCD', 'XDR', 'XOF', 'XPF', 'YER', 'ZAR', 'ZMW', 'ZWD']).optional().describe('Allowed values defined by ISO 4217'),
  "description": zod.string().optional().describe('Cost(s) Description'),
  "title": zod.string().describe('Title'),
  "value": zod.number().optional().describe('Value')
})).optional(),
  "created": zod.iso.datetime({}).describe('Date and time of the first version of a DMP. Must not be changed in subsequent DMPs. Encoded using the relevant ISO 8601 Date and Time (with timezone) compliant string'),
  "dataset": zod.array(zod.object({
  "data_quality_assurance": zod.array(zod.string()).optional().describe('Data Quality Assurance'),
  "dataset_id": zod.object({
  "identifier": zod.string().describe('Identifier for a dataset'),
  "type": zod.enum(['handle', 'doi', 'ark', 'url', 'other']).describe('Dataset identifier type. Allowed values: handle, doi, ark, url, other')
}).describe('Dataset ID'),
  "description": zod.string().optional().describe('Description is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "distribution": zod.array(zod.object({
  "access_url": zod.string().optional().describe('A URL of the resource that gives access to a distribution of the dataset. e.g. landing page.'),
  "available_until": zod.iso.date().optional().describe('Indicates how long this distribution will be/ should be available. Encoded using the relevant ISO 8601 Date compliant string.'),
  "byte_size": zod.number().optional().describe('Size in bytes.'),
  "data_access": zod.enum(['open', 'shared', 'closed']).describe('Indicates access mode for data. Allowed values: open, shared, closed'),
  "description": zod.string().optional().describe('Description is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "download_url": zod.optional().describe('The URL of the downloadable file in a given format. E.g. CSV file or RDF file.'),
  "format": zod.array(zod.string()).optional().describe('Format according to: https://www.iana.org/assignments/media-types/media-types.xhtml if appropriate, otherwise use the common name for this format.'),
  "host": zod.object({
  "availability": zod.string().optional().describe('Availability'),
  "backup_frequency": zod.string().optional().describe('Backup Frequency'),
  "backup_type": zod.string().optional().describe('Backup Type'),
  "certified_with": zod.enum(['din31644', 'dini-zertifikat', 'dsa', 'iso16363', 'iso16919', 'trac', 'wds', 'coretrustseal']).optional().describe('Repository certified to a recognised standard. Allowed values: din31644, dini-zertifikat, dsa, iso16363, iso16919, trac, wds, coretrustseal'),
  "description": zod.string().optional().describe('Description'),
  "geo_location": zod.enumoptional().describe('Physical location of the data expressed using ISO 3166-1 country code.'),
  "pid_system": zod.array(zod.enum(['ark', 'arxiv', 'bibcode', 'doi', 'ean13', 'eissn', 'handle', 'igsn', 'isbn', 'issn', 'istc', 'lissn', 'lsid', 'pmid', 'purl', 'upc', 'url', 'urn', 'other'])).optional().describe('PID system(s). Allowed values: ark, arxiv, bibcode, doi, ean13, eissn, handle, igsn, isbn, issn, istc, lissn, lsid, pmid, purl, upc, url, urn, other'),
  "storage_type": zod.string().optional().describe('The type of storage required'),
  "support_versioning": zod.enum(['yes', 'no', 'unknown']).optional().describe('To indicate whether there are ethical issues related to data that this DMP describes. Allowed values: yes, no, unknown'),
  "title": zod.string().describe('Title'),
  "url": zod.describe('The URL of the system hosting a distribution of a dataset')
}).optional().describe('To provide information on quality of service provided by infrastructure (e.g. repository) where data is stored.'),
  "license": zod.array(zod.object({
  "license_ref": zod.describe('Link to license document.'),
  "start_date": zod.iso.date().describe('If date is set in the future, it indicates embargo period. Encoded using the relevant ISO 8601 Date compliant string.')
})).optional().describe('To list all licenses applied to a specific distribution of data.'),
  "title": zod.string().describe('Title is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.')
})).optional().describe('To provide technical information on a specific instance of data.'),
  "is_reused": zod.boolean().optional().describe('Indicates if the dataset is reused, i.e., not produced in project(s) covered by this DMP.'),
  "issued": zod.iso.date().optional().describe('Issued. Encoded using the relevant ISO 8601 Date compliant string.'),
  "keyword": zod.array(zod.string()).optional().describe('Keywords'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).optional().describe('Language of the dataset expressed using ISO 639-3.'),
  "metadata": zod.array(zod.object({
  "description": zod.string().optional().describe('Description'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).describe('Language of the metadata expressed using ISO 639-3.'),
  "metadata_standard_id": zod.object({
  "identifier": zod.string().describe('Identifier for the metadata standard used.'),
  "type": zod.enum(['url', 'other']).describe('Identifier type. Allowed values: url, other')
})
})).optional().describe('To describe metadata standards used.'),
  "personal_data": zod.enum(['yes', 'no', 'unknown']).describe('If any personal data is contained. Allowed values: yes, no, unknown'),
  "preservation_statement": zod.string().optional().describe('Preservation Statement'),
  "security_and_privacy": zod.array(zod.object({
  "description": zod.string().optional().describe('Description'),
  "title": zod.string().describe('Title')
})).optional().describe('To list all issues and requirements related to security and privacy'),
  "sensitive_data": zod.enum(['yes', 'no', 'unknown']).describe('If any sensitive data is contained. Allowed values: yes, no, unknown'),
  "technical_resource": zod.array(zod.object({
  "description": zod.string().optional().describe('Description of the technical resource'),
  "name": zod.string().describe('Name of the technical resource')
})).optional().describe('To list all technical resources needed to implement a DMP'),
  "title": zod.string().describe('Title is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "type": zod.string().optional().describe('If appropriate, type according to: DataCite and/or COAR dictionary. Otherwise use the common name for the type, e.g. raw data, software, survey, etc. https://schema.datacite.org/meta/kernel-4.1/doc/DataCite-MetadataKernel_v4.1.pdf http://vocabularies.coar-repositories.org/pubby/resource_type.html')
})),
  "description": zod.string().optional().describe('To provide any free-form text information on a DMP'),
  "dmp_id": zod.object({
  "identifier": zod.string().describe('Identifier for a DMP'),
  "type": zod.enum(['handle', 'doi', 'ark', 'url', 'other']).describe('The DMP Identifier Type. Allowed values: handle, doi, ark, url, other')
}).describe('Identifier for the DMP itself'),
  "ethical_issues_description": zod.string().optional().describe('To describe ethical issues directly in a DMP'),
  "ethical_issues_exist": zod.enum(['yes', 'no', 'unknown']).describe('To indicate whether there are ethical issues related to data that this DMP describes. Allowed values: yes, no, unknown'),
  "ethical_issues_report": zod.optional().describe('To indicate where a protocol from a meeting with an ethical commitee can be found'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).describe('Language of the metadata expressed using ISO 639-3.'),
  "modified": zod.iso.datetime({}).describe('Must be set each time DMP is modified. Indicates DMP version. Encoded using the relevant ISO 8601 Date and Time (with timezone) compliant string.'),
  "project": zod.array(zod.object({
  "description": zod.string().optional().describe('Project description'),
  "end": zod.iso.date().optional().describe('Project end date. Encoded using the relevant ISO 8601 Date compliant string.'),
  "funding": zod.array(zod.object({
  "funder_id": zod.object({
  "identifier": zod.string().describe('Funder ID, recommended to use CrossRef Funder Registry. See: https://www.crossref.org/services/funder-registry/'),
  "type": zod.enum(['fundref', 'url', 'other']).describe('Identifier type. Allowed values: fundref, url, other')
}).describe('Funder ID of the associated project'),
  "funding_status": zod.enum(['planned', 'applied', 'granted', 'rejected']).optional().describe('To express different phases of project lifecycle. Allowed values: planned, applied, granted, rejected'),
  "grant_id": zod.object({
  "identifier": zod.string().describe('Grant ID'),
  "type": zod.enum(['url', 'other']).describe('Identifier type. Allowed values: url, other')
}).optional().describe('Grant ID of the associated project')
})).optional().describe('Funding related with a project'),
  "start": zod.iso.date().optional().describe('Project start date. Encoded using the relevant ISO 8601 Date compliant string.'),
  "title": zod.string().describe('Project title')
})).optional().describe('Project related to a DMP'),
  "title": zod.string().describe('Title of a DMP')
}).optional()
})

export const createDMPResponse = zod.object({
  "dmp": zod.object({
  "contact": zod.object({
  "contact_id": zod.object({
  "identifier": zod.string(),
  "type": zod.enum(['orcid', 'isni', 'openid', 'other']).describe('Identifier type. Allowed values: orcid, isni, openid, other')
}),
  "mbox": zod.email().describe('Contact Person\'s E-mail address'),
  "name": zod.string().describe('Name of the contact person')
}),
  "contributor": zod.array(zod.object({
  "contributor_id": zod.object({
  "identifier": zod.string(),
  "type": zod.enum(['orcid', 'isni', 'openid', 'other']).describe('Identifier type. Allowed values: orcid, isni, openid, other')
}),
  "mbox": zod.email().optional().describe('Contributor Mail address'),
  "name": zod.string().describe('Name of the contributor'),
  "role": zod.array(zod.string()).describe('Type of contributor')
})).optional(),
  "cost": zod.array(zod.object({
  "currency_code": zod.enum(['AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BRL', 'BSD', 'BTN', 'BWP', 'BYN', 'BZD', 'CAD', 'CDF', 'CHF', 'CLP', 'CNY', 'COP', 'CRC', 'CUC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GGP', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS', 'IMP', 'INR', 'IQD', 'IRR', 'ISK', 'JEP', 'JMD', 'JOD', 'JPY', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRU', 'MUR', 'MVR', 'MWK', 'MXN', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLL', 'SOS', 'SPL*', 'SRD', 'STN', 'SVC', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TVD', 'TWD', 'TZS', 'UAH', 'UGX', 'USD', 'UYU', 'UZS', 'VEF', 'VND', 'VUV', 'WST', 'XAF', 'XCD', 'XDR', 'XOF', 'XPF', 'YER', 'ZAR', 'ZMW', 'ZWD']).optional().describe('Allowed values defined by ISO 4217'),
  "description": zod.string().optional().describe('Cost(s) Description'),
  "title": zod.string().describe('Title'),
  "value": zod.number().optional().describe('Value')
})).optional(),
  "created": zod.iso.datetime({}).describe('Date and time of the first version of a DMP. Must not be changed in subsequent DMPs. Encoded using the relevant ISO 8601 Date and Time (with timezone) compliant string'),
  "dataset": zod.array(zod.object({
  "data_quality_assurance": zod.array(zod.string()).optional().describe('Data Quality Assurance'),
  "dataset_id": zod.object({
  "identifier": zod.string().describe('Identifier for a dataset'),
  "type": zod.enum(['handle', 'doi', 'ark', 'url', 'other']).describe('Dataset identifier type. Allowed values: handle, doi, ark, url, other')
}).describe('Dataset ID'),
  "description": zod.string().optional().describe('Description is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "distribution": zod.array(zod.object({
  "access_url": zod.string().optional().describe('A URL of the resource that gives access to a distribution of the dataset. e.g. landing page.'),
  "available_until": zod.iso.date().optional().describe('Indicates how long this distribution will be/ should be available. Encoded using the relevant ISO 8601 Date compliant string.'),
  "byte_size": zod.number().optional().describe('Size in bytes.'),
  "data_access": zod.enum(['open', 'shared', 'closed']).describe('Indicates access mode for data. Allowed values: open, shared, closed'),
  "description": zod.string().optional().describe('Description is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "download_url": zod.optional().describe('The URL of the downloadable file in a given format. E.g. CSV file or RDF file.'),
  "format": zod.array(zod.string()).optional().describe('Format according to: https://www.iana.org/assignments/media-types/media-types.xhtml if appropriate, otherwise use the common name for this format.'),
  "host": zod.object({
  "availability": zod.string().optional().describe('Availability'),
  "backup_frequency": zod.string().optional().describe('Backup Frequency'),
  "backup_type": zod.string().optional().describe('Backup Type'),
  "certified_with": zod.enum(['din31644', 'dini-zertifikat', 'dsa', 'iso16363', 'iso16919', 'trac', 'wds', 'coretrustseal']).optional().describe('Repository certified to a recognised standard. Allowed values: din31644, dini-zertifikat, dsa, iso16363, iso16919, trac, wds, coretrustseal'),
  "description": zod.string().optional().describe('Description'),
  "geo_location": zod.enumoptional().describe('Physical location of the data expressed using ISO 3166-1 country code.'),
  "pid_system": zod.array(zod.enum(['ark', 'arxiv', 'bibcode', 'doi', 'ean13', 'eissn', 'handle', 'igsn', 'isbn', 'issn', 'istc', 'lissn', 'lsid', 'pmid', 'purl', 'upc', 'url', 'urn', 'other'])).optional().describe('PID system(s). Allowed values: ark, arxiv, bibcode, doi, ean13, eissn, handle, igsn, isbn, issn, istc, lissn, lsid, pmid, purl, upc, url, urn, other'),
  "storage_type": zod.string().optional().describe('The type of storage required'),
  "support_versioning": zod.enum(['yes', 'no', 'unknown']).optional().describe('To indicate whether there are ethical issues related to data that this DMP describes. Allowed values: yes, no, unknown'),
  "title": zod.string().describe('Title'),
  "url": zod.describe('The URL of the system hosting a distribution of a dataset')
}).optional().describe('To provide information on quality of service provided by infrastructure (e.g. repository) where data is stored.'),
  "license": zod.array(zod.object({
  "license_ref": zod.describe('Link to license document.'),
  "start_date": zod.iso.date().describe('If date is set in the future, it indicates embargo period. Encoded using the relevant ISO 8601 Date compliant string.')
})).optional().describe('To list all licenses applied to a specific distribution of data.'),
  "title": zod.string().describe('Title is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.')
})).optional().describe('To provide technical information on a specific instance of data.'),
  "is_reused": zod.boolean().optional().describe('Indicates if the dataset is reused, i.e., not produced in project(s) covered by this DMP.'),
  "issued": zod.iso.date().optional().describe('Issued. Encoded using the relevant ISO 8601 Date compliant string.'),
  "keyword": zod.array(zod.string()).optional().describe('Keywords'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).optional().describe('Language of the dataset expressed using ISO 639-3.'),
  "metadata": zod.array(zod.object({
  "description": zod.string().optional().describe('Description'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).describe('Language of the metadata expressed using ISO 639-3.'),
  "metadata_standard_id": zod.object({
  "identifier": zod.string().describe('Identifier for the metadata standard used.'),
  "type": zod.enum(['url', 'other']).describe('Identifier type. Allowed values: url, other')
})
})).optional().describe('To describe metadata standards used.'),
  "personal_data": zod.enum(['yes', 'no', 'unknown']).describe('If any personal data is contained. Allowed values: yes, no, unknown'),
  "preservation_statement": zod.string().optional().describe('Preservation Statement'),
  "security_and_privacy": zod.array(zod.object({
  "description": zod.string().optional().describe('Description'),
  "title": zod.string().describe('Title')
})).optional().describe('To list all issues and requirements related to security and privacy'),
  "sensitive_data": zod.enum(['yes', 'no', 'unknown']).describe('If any sensitive data is contained. Allowed values: yes, no, unknown'),
  "technical_resource": zod.array(zod.object({
  "description": zod.string().optional().describe('Description of the technical resource'),
  "name": zod.string().describe('Name of the technical resource')
})).optional().describe('To list all technical resources needed to implement a DMP'),
  "title": zod.string().describe('Title is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "type": zod.string().optional().describe('If appropriate, type according to: DataCite and/or COAR dictionary. Otherwise use the common name for the type, e.g. raw data, software, survey, etc. https://schema.datacite.org/meta/kernel-4.1/doc/DataCite-MetadataKernel_v4.1.pdf http://vocabularies.coar-repositories.org/pubby/resource_type.html')
})),
  "description": zod.string().optional().describe('To provide any free-form text information on a DMP'),
  "dmp_id": zod.object({
  "identifier": zod.string().describe('Identifier for a DMP'),
  "type": zod.enum(['handle', 'doi', 'ark', 'url', 'other']).describe('The DMP Identifier Type. Allowed values: handle, doi, ark, url, other')
}).describe('Identifier for the DMP itself'),
  "ethical_issues_description": zod.string().optional().describe('To describe ethical issues directly in a DMP'),
  "ethical_issues_exist": zod.enum(['yes', 'no', 'unknown']).describe('To indicate whether there are ethical issues related to data that this DMP describes. Allowed values: yes, no, unknown'),
  "ethical_issues_report": zod.optional().describe('To indicate where a protocol from a meeting with an ethical commitee can be found'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).describe('Language of the metadata expressed using ISO 639-3.'),
  "modified": zod.iso.datetime({}).describe('Must be set each time DMP is modified. Indicates DMP version. Encoded using the relevant ISO 8601 Date and Time (with timezone) compliant string.'),
  "project": zod.array(zod.object({
  "description": zod.string().optional().describe('Project description'),
  "end": zod.iso.date().optional().describe('Project end date. Encoded using the relevant ISO 8601 Date compliant string.'),
  "funding": zod.array(zod.object({
  "funder_id": zod.object({
  "identifier": zod.string().describe('Funder ID, recommended to use CrossRef Funder Registry. See: https://www.crossref.org/services/funder-registry/'),
  "type": zod.enum(['fundref', 'url', 'other']).describe('Identifier type. Allowed values: fundref, url, other')
}).describe('Funder ID of the associated project'),
  "funding_status": zod.enum(['planned', 'applied', 'granted', 'rejected']).optional().describe('To express different phases of project lifecycle. Allowed values: planned, applied, granted, rejected'),
  "grant_id": zod.object({
  "identifier": zod.string().describe('Grant ID'),
  "type": zod.enum(['url', 'other']).describe('Identifier type. Allowed values: url, other')
}).optional().describe('Grant ID of the associated project')
})).optional().describe('Funding related with a project'),
  "start": zod.iso.date().optional().describe('Project start date. Encoded using the relevant ISO 8601 Date compliant string.'),
  "title": zod.string().describe('Project title')
})).optional().describe('Project related to a DMP'),
  "title": zod.string().describe('Title of a DMP')
}).optional()
}).and(zod.object({
  "id": zod.string()
}))


/**
 * Fetch a DMP based on its ID.

 * @summary Get a DMP
 */
export const getDMPParams = zod.object({
  "id": zod.string()
})

export const getDMPResponse = zod.object({
  "dmp": zod.object({
  "contact": zod.object({
  "contact_id": zod.object({
  "identifier": zod.string(),
  "type": zod.enum(['orcid', 'isni', 'openid', 'other']).describe('Identifier type. Allowed values: orcid, isni, openid, other')
}),
  "mbox": zod.email().describe('Contact Person\'s E-mail address'),
  "name": zod.string().describe('Name of the contact person')
}),
  "contributor": zod.array(zod.object({
  "contributor_id": zod.object({
  "identifier": zod.string(),
  "type": zod.enum(['orcid', 'isni', 'openid', 'other']).describe('Identifier type. Allowed values: orcid, isni, openid, other')
}),
  "mbox": zod.email().optional().describe('Contributor Mail address'),
  "name": zod.string().describe('Name of the contributor'),
  "role": zod.array(zod.string()).describe('Type of contributor')
})).optional(),
  "cost": zod.array(zod.object({
  "currency_code": zod.enum(['AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BRL', 'BSD', 'BTN', 'BWP', 'BYN', 'BZD', 'CAD', 'CDF', 'CHF', 'CLP', 'CNY', 'COP', 'CRC', 'CUC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GGP', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS', 'IMP', 'INR', 'IQD', 'IRR', 'ISK', 'JEP', 'JMD', 'JOD', 'JPY', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRU', 'MUR', 'MVR', 'MWK', 'MXN', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLL', 'SOS', 'SPL*', 'SRD', 'STN', 'SVC', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TVD', 'TWD', 'TZS', 'UAH', 'UGX', 'USD', 'UYU', 'UZS', 'VEF', 'VND', 'VUV', 'WST', 'XAF', 'XCD', 'XDR', 'XOF', 'XPF', 'YER', 'ZAR', 'ZMW', 'ZWD']).optional().describe('Allowed values defined by ISO 4217'),
  "description": zod.string().optional().describe('Cost(s) Description'),
  "title": zod.string().describe('Title'),
  "value": zod.number().optional().describe('Value')
})).optional(),
  "created": zod.iso.datetime({}).describe('Date and time of the first version of a DMP. Must not be changed in subsequent DMPs. Encoded using the relevant ISO 8601 Date and Time (with timezone) compliant string'),
  "dataset": zod.array(zod.object({
  "data_quality_assurance": zod.array(zod.string()).optional().describe('Data Quality Assurance'),
  "dataset_id": zod.object({
  "identifier": zod.string().describe('Identifier for a dataset'),
  "type": zod.enum(['handle', 'doi', 'ark', 'url', 'other']).describe('Dataset identifier type. Allowed values: handle, doi, ark, url, other')
}).describe('Dataset ID'),
  "description": zod.string().optional().describe('Description is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "distribution": zod.array(zod.object({
  "access_url": zod.string().optional().describe('A URL of the resource that gives access to a distribution of the dataset. e.g. landing page.'),
  "available_until": zod.iso.date().optional().describe('Indicates how long this distribution will be/ should be available. Encoded using the relevant ISO 8601 Date compliant string.'),
  "byte_size": zod.number().optional().describe('Size in bytes.'),
  "data_access": zod.enum(['open', 'shared', 'closed']).describe('Indicates access mode for data. Allowed values: open, shared, closed'),
  "description": zod.string().optional().describe('Description is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "download_url": zod.optional().describe('The URL of the downloadable file in a given format. E.g. CSV file or RDF file.'),
  "format": zod.array(zod.string()).optional().describe('Format according to: https://www.iana.org/assignments/media-types/media-types.xhtml if appropriate, otherwise use the common name for this format.'),
  "host": zod.object({
  "availability": zod.string().optional().describe('Availability'),
  "backup_frequency": zod.string().optional().describe('Backup Frequency'),
  "backup_type": zod.string().optional().describe('Backup Type'),
  "certified_with": zod.enum(['din31644', 'dini-zertifikat', 'dsa', 'iso16363', 'iso16919', 'trac', 'wds', 'coretrustseal']).optional().describe('Repository certified to a recognised standard. Allowed values: din31644, dini-zertifikat, dsa, iso16363, iso16919, trac, wds, coretrustseal'),
  "description": zod.string().optional().describe('Description'),
  "geo_location": zod.enumoptional().describe('Physical location of the data expressed using ISO 3166-1 country code.'),
  "pid_system": zod.array(zod.enum(['ark', 'arxiv', 'bibcode', 'doi', 'ean13', 'eissn', 'handle', 'igsn', 'isbn', 'issn', 'istc', 'lissn', 'lsid', 'pmid', 'purl', 'upc', 'url', 'urn', 'other'])).optional().describe('PID system(s). Allowed values: ark, arxiv, bibcode, doi, ean13, eissn, handle, igsn, isbn, issn, istc, lissn, lsid, pmid, purl, upc, url, urn, other'),
  "storage_type": zod.string().optional().describe('The type of storage required'),
  "support_versioning": zod.enum(['yes', 'no', 'unknown']).optional().describe('To indicate whether there are ethical issues related to data that this DMP describes. Allowed values: yes, no, unknown'),
  "title": zod.string().describe('Title'),
  "url": zod.describe('The URL of the system hosting a distribution of a dataset')
}).optional().describe('To provide information on quality of service provided by infrastructure (e.g. repository) where data is stored.'),
  "license": zod.array(zod.object({
  "license_ref": zod.describe('Link to license document.'),
  "start_date": zod.iso.date().describe('If date is set in the future, it indicates embargo period. Encoded using the relevant ISO 8601 Date compliant string.')
})).optional().describe('To list all licenses applied to a specific distribution of data.'),
  "title": zod.string().describe('Title is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.')
})).optional().describe('To provide technical information on a specific instance of data.'),
  "is_reused": zod.boolean().optional().describe('Indicates if the dataset is reused, i.e., not produced in project(s) covered by this DMP.'),
  "issued": zod.iso.date().optional().describe('Issued. Encoded using the relevant ISO 8601 Date compliant string.'),
  "keyword": zod.array(zod.string()).optional().describe('Keywords'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).optional().describe('Language of the dataset expressed using ISO 639-3.'),
  "metadata": zod.array(zod.object({
  "description": zod.string().optional().describe('Description'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).describe('Language of the metadata expressed using ISO 639-3.'),
  "metadata_standard_id": zod.object({
  "identifier": zod.string().describe('Identifier for the metadata standard used.'),
  "type": zod.enum(['url', 'other']).describe('Identifier type. Allowed values: url, other')
})
})).optional().describe('To describe metadata standards used.'),
  "personal_data": zod.enum(['yes', 'no', 'unknown']).describe('If any personal data is contained. Allowed values: yes, no, unknown'),
  "preservation_statement": zod.string().optional().describe('Preservation Statement'),
  "security_and_privacy": zod.array(zod.object({
  "description": zod.string().optional().describe('Description'),
  "title": zod.string().describe('Title')
})).optional().describe('To list all issues and requirements related to security and privacy'),
  "sensitive_data": zod.enum(['yes', 'no', 'unknown']).describe('If any sensitive data is contained. Allowed values: yes, no, unknown'),
  "technical_resource": zod.array(zod.object({
  "description": zod.string().optional().describe('Description of the technical resource'),
  "name": zod.string().describe('Name of the technical resource')
})).optional().describe('To list all technical resources needed to implement a DMP'),
  "title": zod.string().describe('Title is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "type": zod.string().optional().describe('If appropriate, type according to: DataCite and/or COAR dictionary. Otherwise use the common name for the type, e.g. raw data, software, survey, etc. https://schema.datacite.org/meta/kernel-4.1/doc/DataCite-MetadataKernel_v4.1.pdf http://vocabularies.coar-repositories.org/pubby/resource_type.html')
})),
  "description": zod.string().optional().describe('To provide any free-form text information on a DMP'),
  "dmp_id": zod.object({
  "identifier": zod.string().describe('Identifier for a DMP'),
  "type": zod.enum(['handle', 'doi', 'ark', 'url', 'other']).describe('The DMP Identifier Type. Allowed values: handle, doi, ark, url, other')
}).describe('Identifier for the DMP itself'),
  "ethical_issues_description": zod.string().optional().describe('To describe ethical issues directly in a DMP'),
  "ethical_issues_exist": zod.enum(['yes', 'no', 'unknown']).describe('To indicate whether there are ethical issues related to data that this DMP describes. Allowed values: yes, no, unknown'),
  "ethical_issues_report": zod.optional().describe('To indicate where a protocol from a meeting with an ethical commitee can be found'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).describe('Language of the metadata expressed using ISO 639-3.'),
  "modified": zod.iso.datetime({}).describe('Must be set each time DMP is modified. Indicates DMP version. Encoded using the relevant ISO 8601 Date and Time (with timezone) compliant string.'),
  "project": zod.array(zod.object({
  "description": zod.string().optional().describe('Project description'),
  "end": zod.iso.date().optional().describe('Project end date. Encoded using the relevant ISO 8601 Date compliant string.'),
  "funding": zod.array(zod.object({
  "funder_id": zod.object({
  "identifier": zod.string().describe('Funder ID, recommended to use CrossRef Funder Registry. See: https://www.crossref.org/services/funder-registry/'),
  "type": zod.enum(['fundref', 'url', 'other']).describe('Identifier type. Allowed values: fundref, url, other')
}).describe('Funder ID of the associated project'),
  "funding_status": zod.enum(['planned', 'applied', 'granted', 'rejected']).optional().describe('To express different phases of project lifecycle. Allowed values: planned, applied, granted, rejected'),
  "grant_id": zod.object({
  "identifier": zod.string().describe('Grant ID'),
  "type": zod.enum(['url', 'other']).describe('Identifier type. Allowed values: url, other')
}).optional().describe('Grant ID of the associated project')
})).optional().describe('Funding related with a project'),
  "start": zod.iso.date().optional().describe('Project start date. Encoded using the relevant ISO 8601 Date compliant string.'),
  "title": zod.string().describe('Project title')
})).optional().describe('Project related to a DMP'),
  "title": zod.string().describe('Title of a DMP')
}).optional()
}).and(zod.object({
  "id": zod.string()
}))


/**
 * Completely overwrite a DMP with the specified data. The server MUST honor the If-Unmodified-Since and IF-Match
headers if present.

 * @summary Overwrite a DMP
 */
export const putDMPParams = zod.object({
  "id": zod.string()
})

export const putDMPHeader = zod.object({
  "If-Unmodified-Since": zod.iso.datetime({}).optional()
})

export const putDMPBody = zod.object({
  "dmp": zod.object({
  "contact": zod.object({
  "contact_id": zod.object({
  "identifier": zod.string(),
  "type": zod.enum(['orcid', 'isni', 'openid', 'other']).describe('Identifier type. Allowed values: orcid, isni, openid, other')
}),
  "mbox": zod.email().describe('Contact Person\'s E-mail address'),
  "name": zod.string().describe('Name of the contact person')
}),
  "contributor": zod.array(zod.object({
  "contributor_id": zod.object({
  "identifier": zod.string(),
  "type": zod.enum(['orcid', 'isni', 'openid', 'other']).describe('Identifier type. Allowed values: orcid, isni, openid, other')
}),
  "mbox": zod.email().optional().describe('Contributor Mail address'),
  "name": zod.string().describe('Name of the contributor'),
  "role": zod.array(zod.string()).describe('Type of contributor')
})).optional(),
  "cost": zod.array(zod.object({
  "currency_code": zod.enum(['AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BRL', 'BSD', 'BTN', 'BWP', 'BYN', 'BZD', 'CAD', 'CDF', 'CHF', 'CLP', 'CNY', 'COP', 'CRC', 'CUC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GGP', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS', 'IMP', 'INR', 'IQD', 'IRR', 'ISK', 'JEP', 'JMD', 'JOD', 'JPY', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRU', 'MUR', 'MVR', 'MWK', 'MXN', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLL', 'SOS', 'SPL*', 'SRD', 'STN', 'SVC', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TVD', 'TWD', 'TZS', 'UAH', 'UGX', 'USD', 'UYU', 'UZS', 'VEF', 'VND', 'VUV', 'WST', 'XAF', 'XCD', 'XDR', 'XOF', 'XPF', 'YER', 'ZAR', 'ZMW', 'ZWD']).optional().describe('Allowed values defined by ISO 4217'),
  "description": zod.string().optional().describe('Cost(s) Description'),
  "title": zod.string().describe('Title'),
  "value": zod.number().optional().describe('Value')
})).optional(),
  "created": zod.iso.datetime({}).describe('Date and time of the first version of a DMP. Must not be changed in subsequent DMPs. Encoded using the relevant ISO 8601 Date and Time (with timezone) compliant string'),
  "dataset": zod.array(zod.object({
  "data_quality_assurance": zod.array(zod.string()).optional().describe('Data Quality Assurance'),
  "dataset_id": zod.object({
  "identifier": zod.string().describe('Identifier for a dataset'),
  "type": zod.enum(['handle', 'doi', 'ark', 'url', 'other']).describe('Dataset identifier type. Allowed values: handle, doi, ark, url, other')
}).describe('Dataset ID'),
  "description": zod.string().optional().describe('Description is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "distribution": zod.array(zod.object({
  "access_url": zod.string().optional().describe('A URL of the resource that gives access to a distribution of the dataset. e.g. landing page.'),
  "available_until": zod.iso.date().optional().describe('Indicates how long this distribution will be/ should be available. Encoded using the relevant ISO 8601 Date compliant string.'),
  "byte_size": zod.number().optional().describe('Size in bytes.'),
  "data_access": zod.enum(['open', 'shared', 'closed']).describe('Indicates access mode for data. Allowed values: open, shared, closed'),
  "description": zod.string().optional().describe('Description is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "download_url": zod.optional().describe('The URL of the downloadable file in a given format. E.g. CSV file or RDF file.'),
  "format": zod.array(zod.string()).optional().describe('Format according to: https://www.iana.org/assignments/media-types/media-types.xhtml if appropriate, otherwise use the common name for this format.'),
  "host": zod.object({
  "availability": zod.string().optional().describe('Availability'),
  "backup_frequency": zod.string().optional().describe('Backup Frequency'),
  "backup_type": zod.string().optional().describe('Backup Type'),
  "certified_with": zod.enum(['din31644', 'dini-zertifikat', 'dsa', 'iso16363', 'iso16919', 'trac', 'wds', 'coretrustseal']).optional().describe('Repository certified to a recognised standard. Allowed values: din31644, dini-zertifikat, dsa, iso16363, iso16919, trac, wds, coretrustseal'),
  "description": zod.string().optional().describe('Description'),
  "geo_location": zod.enumoptional().describe('Physical location of the data expressed using ISO 3166-1 country code.'),
  "pid_system": zod.array(zod.enum(['ark', 'arxiv', 'bibcode', 'doi', 'ean13', 'eissn', 'handle', 'igsn', 'isbn', 'issn', 'istc', 'lissn', 'lsid', 'pmid', 'purl', 'upc', 'url', 'urn', 'other'])).optional().describe('PID system(s). Allowed values: ark, arxiv, bibcode, doi, ean13, eissn, handle, igsn, isbn, issn, istc, lissn, lsid, pmid, purl, upc, url, urn, other'),
  "storage_type": zod.string().optional().describe('The type of storage required'),
  "support_versioning": zod.enum(['yes', 'no', 'unknown']).optional().describe('To indicate whether there are ethical issues related to data that this DMP describes. Allowed values: yes, no, unknown'),
  "title": zod.string().describe('Title'),
  "url": zod.describe('The URL of the system hosting a distribution of a dataset')
}).optional().describe('To provide information on quality of service provided by infrastructure (e.g. repository) where data is stored.'),
  "license": zod.array(zod.object({
  "license_ref": zod.describe('Link to license document.'),
  "start_date": zod.iso.date().describe('If date is set in the future, it indicates embargo period. Encoded using the relevant ISO 8601 Date compliant string.')
})).optional().describe('To list all licenses applied to a specific distribution of data.'),
  "title": zod.string().describe('Title is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.')
})).optional().describe('To provide technical information on a specific instance of data.'),
  "is_reused": zod.boolean().optional().describe('Indicates if the dataset is reused, i.e., not produced in project(s) covered by this DMP.'),
  "issued": zod.iso.date().optional().describe('Issued. Encoded using the relevant ISO 8601 Date compliant string.'),
  "keyword": zod.array(zod.string()).optional().describe('Keywords'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).optional().describe('Language of the dataset expressed using ISO 639-3.'),
  "metadata": zod.array(zod.object({
  "description": zod.string().optional().describe('Description'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).describe('Language of the metadata expressed using ISO 639-3.'),
  "metadata_standard_id": zod.object({
  "identifier": zod.string().describe('Identifier for the metadata standard used.'),
  "type": zod.enum(['url', 'other']).describe('Identifier type. Allowed values: url, other')
})
})).optional().describe('To describe metadata standards used.'),
  "personal_data": zod.enum(['yes', 'no', 'unknown']).describe('If any personal data is contained. Allowed values: yes, no, unknown'),
  "preservation_statement": zod.string().optional().describe('Preservation Statement'),
  "security_and_privacy": zod.array(zod.object({
  "description": zod.string().optional().describe('Description'),
  "title": zod.string().describe('Title')
})).optional().describe('To list all issues and requirements related to security and privacy'),
  "sensitive_data": zod.enum(['yes', 'no', 'unknown']).describe('If any sensitive data is contained. Allowed values: yes, no, unknown'),
  "technical_resource": zod.array(zod.object({
  "description": zod.string().optional().describe('Description of the technical resource'),
  "name": zod.string().describe('Name of the technical resource')
})).optional().describe('To list all technical resources needed to implement a DMP'),
  "title": zod.string().describe('Title is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "type": zod.string().optional().describe('If appropriate, type according to: DataCite and/or COAR dictionary. Otherwise use the common name for the type, e.g. raw data, software, survey, etc. https://schema.datacite.org/meta/kernel-4.1/doc/DataCite-MetadataKernel_v4.1.pdf http://vocabularies.coar-repositories.org/pubby/resource_type.html')
})),
  "description": zod.string().optional().describe('To provide any free-form text information on a DMP'),
  "dmp_id": zod.object({
  "identifier": zod.string().describe('Identifier for a DMP'),
  "type": zod.enum(['handle', 'doi', 'ark', 'url', 'other']).describe('The DMP Identifier Type. Allowed values: handle, doi, ark, url, other')
}).describe('Identifier for the DMP itself'),
  "ethical_issues_description": zod.string().optional().describe('To describe ethical issues directly in a DMP'),
  "ethical_issues_exist": zod.enum(['yes', 'no', 'unknown']).describe('To indicate whether there are ethical issues related to data that this DMP describes. Allowed values: yes, no, unknown'),
  "ethical_issues_report": zod.optional().describe('To indicate where a protocol from a meeting with an ethical commitee can be found'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).describe('Language of the metadata expressed using ISO 639-3.'),
  "modified": zod.iso.datetime({}).describe('Must be set each time DMP is modified. Indicates DMP version. Encoded using the relevant ISO 8601 Date and Time (with timezone) compliant string.'),
  "project": zod.array(zod.object({
  "description": zod.string().optional().describe('Project description'),
  "end": zod.iso.date().optional().describe('Project end date. Encoded using the relevant ISO 8601 Date compliant string.'),
  "funding": zod.array(zod.object({
  "funder_id": zod.object({
  "identifier": zod.string().describe('Funder ID, recommended to use CrossRef Funder Registry. See: https://www.crossref.org/services/funder-registry/'),
  "type": zod.enum(['fundref', 'url', 'other']).describe('Identifier type. Allowed values: fundref, url, other')
}).describe('Funder ID of the associated project'),
  "funding_status": zod.enum(['planned', 'applied', 'granted', 'rejected']).optional().describe('To express different phases of project lifecycle. Allowed values: planned, applied, granted, rejected'),
  "grant_id": zod.object({
  "identifier": zod.string().describe('Grant ID'),
  "type": zod.enum(['url', 'other']).describe('Identifier type. Allowed values: url, other')
}).optional().describe('Grant ID of the associated project')
})).optional().describe('Funding related with a project'),
  "start": zod.iso.date().optional().describe('Project start date. Encoded using the relevant ISO 8601 Date compliant string.'),
  "title": zod.string().describe('Project title')
})).optional().describe('Project related to a DMP'),
  "title": zod.string().describe('Title of a DMP')
}).optional()
})

export const putDMPResponse = zod.object({
  "dmp": zod.object({
  "contact": zod.object({
  "contact_id": zod.object({
  "identifier": zod.string(),
  "type": zod.enum(['orcid', 'isni', 'openid', 'other']).describe('Identifier type. Allowed values: orcid, isni, openid, other')
}),
  "mbox": zod.email().describe('Contact Person\'s E-mail address'),
  "name": zod.string().describe('Name of the contact person')
}),
  "contributor": zod.array(zod.object({
  "contributor_id": zod.object({
  "identifier": zod.string(),
  "type": zod.enum(['orcid', 'isni', 'openid', 'other']).describe('Identifier type. Allowed values: orcid, isni, openid, other')
}),
  "mbox": zod.email().optional().describe('Contributor Mail address'),
  "name": zod.string().describe('Name of the contributor'),
  "role": zod.array(zod.string()).describe('Type of contributor')
})).optional(),
  "cost": zod.array(zod.object({
  "currency_code": zod.enum(['AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BRL', 'BSD', 'BTN', 'BWP', 'BYN', 'BZD', 'CAD', 'CDF', 'CHF', 'CLP', 'CNY', 'COP', 'CRC', 'CUC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GGP', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS', 'IMP', 'INR', 'IQD', 'IRR', 'ISK', 'JEP', 'JMD', 'JOD', 'JPY', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRU', 'MUR', 'MVR', 'MWK', 'MXN', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLL', 'SOS', 'SPL*', 'SRD', 'STN', 'SVC', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TVD', 'TWD', 'TZS', 'UAH', 'UGX', 'USD', 'UYU', 'UZS', 'VEF', 'VND', 'VUV', 'WST', 'XAF', 'XCD', 'XDR', 'XOF', 'XPF', 'YER', 'ZAR', 'ZMW', 'ZWD']).optional().describe('Allowed values defined by ISO 4217'),
  "description": zod.string().optional().describe('Cost(s) Description'),
  "title": zod.string().describe('Title'),
  "value": zod.number().optional().describe('Value')
})).optional(),
  "created": zod.iso.datetime({}).describe('Date and time of the first version of a DMP. Must not be changed in subsequent DMPs. Encoded using the relevant ISO 8601 Date and Time (with timezone) compliant string'),
  "dataset": zod.array(zod.object({
  "data_quality_assurance": zod.array(zod.string()).optional().describe('Data Quality Assurance'),
  "dataset_id": zod.object({
  "identifier": zod.string().describe('Identifier for a dataset'),
  "type": zod.enum(['handle', 'doi', 'ark', 'url', 'other']).describe('Dataset identifier type. Allowed values: handle, doi, ark, url, other')
}).describe('Dataset ID'),
  "description": zod.string().optional().describe('Description is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "distribution": zod.array(zod.object({
  "access_url": zod.string().optional().describe('A URL of the resource that gives access to a distribution of the dataset. e.g. landing page.'),
  "available_until": zod.iso.date().optional().describe('Indicates how long this distribution will be/ should be available. Encoded using the relevant ISO 8601 Date compliant string.'),
  "byte_size": zod.number().optional().describe('Size in bytes.'),
  "data_access": zod.enum(['open', 'shared', 'closed']).describe('Indicates access mode for data. Allowed values: open, shared, closed'),
  "description": zod.string().optional().describe('Description is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "download_url": zod.optional().describe('The URL of the downloadable file in a given format. E.g. CSV file or RDF file.'),
  "format": zod.array(zod.string()).optional().describe('Format according to: https://www.iana.org/assignments/media-types/media-types.xhtml if appropriate, otherwise use the common name for this format.'),
  "host": zod.object({
  "availability": zod.string().optional().describe('Availability'),
  "backup_frequency": zod.string().optional().describe('Backup Frequency'),
  "backup_type": zod.string().optional().describe('Backup Type'),
  "certified_with": zod.enum(['din31644', 'dini-zertifikat', 'dsa', 'iso16363', 'iso16919', 'trac', 'wds', 'coretrustseal']).optional().describe('Repository certified to a recognised standard. Allowed values: din31644, dini-zertifikat, dsa, iso16363, iso16919, trac, wds, coretrustseal'),
  "description": zod.string().optional().describe('Description'),
  "geo_location": zod.enumoptional().describe('Physical location of the data expressed using ISO 3166-1 country code.'),
  "pid_system": zod.array(zod.enum(['ark', 'arxiv', 'bibcode', 'doi', 'ean13', 'eissn', 'handle', 'igsn', 'isbn', 'issn', 'istc', 'lissn', 'lsid', 'pmid', 'purl', 'upc', 'url', 'urn', 'other'])).optional().describe('PID system(s). Allowed values: ark, arxiv, bibcode, doi, ean13, eissn, handle, igsn, isbn, issn, istc, lissn, lsid, pmid, purl, upc, url, urn, other'),
  "storage_type": zod.string().optional().describe('The type of storage required'),
  "support_versioning": zod.enum(['yes', 'no', 'unknown']).optional().describe('To indicate whether there are ethical issues related to data that this DMP describes. Allowed values: yes, no, unknown'),
  "title": zod.string().describe('Title'),
  "url": zod.describe('The URL of the system hosting a distribution of a dataset')
}).optional().describe('To provide information on quality of service provided by infrastructure (e.g. repository) where data is stored.'),
  "license": zod.array(zod.object({
  "license_ref": zod.describe('Link to license document.'),
  "start_date": zod.iso.date().describe('If date is set in the future, it indicates embargo period. Encoded using the relevant ISO 8601 Date compliant string.')
})).optional().describe('To list all licenses applied to a specific distribution of data.'),
  "title": zod.string().describe('Title is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.')
})).optional().describe('To provide technical information on a specific instance of data.'),
  "is_reused": zod.boolean().optional().describe('Indicates if the dataset is reused, i.e., not produced in project(s) covered by this DMP.'),
  "issued": zod.iso.date().optional().describe('Issued. Encoded using the relevant ISO 8601 Date compliant string.'),
  "keyword": zod.array(zod.string()).optional().describe('Keywords'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).optional().describe('Language of the dataset expressed using ISO 639-3.'),
  "metadata": zod.array(zod.object({
  "description": zod.string().optional().describe('Description'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).describe('Language of the metadata expressed using ISO 639-3.'),
  "metadata_standard_id": zod.object({
  "identifier": zod.string().describe('Identifier for the metadata standard used.'),
  "type": zod.enum(['url', 'other']).describe('Identifier type. Allowed values: url, other')
})
})).optional().describe('To describe metadata standards used.'),
  "personal_data": zod.enum(['yes', 'no', 'unknown']).describe('If any personal data is contained. Allowed values: yes, no, unknown'),
  "preservation_statement": zod.string().optional().describe('Preservation Statement'),
  "security_and_privacy": zod.array(zod.object({
  "description": zod.string().optional().describe('Description'),
  "title": zod.string().describe('Title')
})).optional().describe('To list all issues and requirements related to security and privacy'),
  "sensitive_data": zod.enum(['yes', 'no', 'unknown']).describe('If any sensitive data is contained. Allowed values: yes, no, unknown'),
  "technical_resource": zod.array(zod.object({
  "description": zod.string().optional().describe('Description of the technical resource'),
  "name": zod.string().describe('Name of the technical resource')
})).optional().describe('To list all technical resources needed to implement a DMP'),
  "title": zod.string().describe('Title is a property in both Dataset and Distribution, in compliance with W3C DCAT. In some cases these might be identical, but in most cases the Dataset represents a more abstract concept, while the distribution can point to a specific file.'),
  "type": zod.string().optional().describe('If appropriate, type according to: DataCite and/or COAR dictionary. Otherwise use the common name for the type, e.g. raw data, software, survey, etc. https://schema.datacite.org/meta/kernel-4.1/doc/DataCite-MetadataKernel_v4.1.pdf http://vocabularies.coar-repositories.org/pubby/resource_type.html')
})),
  "description": zod.string().optional().describe('To provide any free-form text information on a DMP'),
  "dmp_id": zod.object({
  "identifier": zod.string().describe('Identifier for a DMP'),
  "type": zod.enum(['handle', 'doi', 'ark', 'url', 'other']).describe('The DMP Identifier Type. Allowed values: handle, doi, ark, url, other')
}).describe('Identifier for the DMP itself'),
  "ethical_issues_description": zod.string().optional().describe('To describe ethical issues directly in a DMP'),
  "ethical_issues_exist": zod.enum(['yes', 'no', 'unknown']).describe('To indicate whether there are ethical issues related to data that this DMP describes. Allowed values: yes, no, unknown'),
  "ethical_issues_report": zod.optional().describe('To indicate where a protocol from a meeting with an ethical commitee can be found'),
  "language": zod.enum(['aar', 'abk', 'afr', 'aka', 'amh', 'ara', 'arg', 'asm', 'ava', 'ave', 'aym', 'aze', 'bak', 'bam', 'bel', 'ben', 'bih', 'bis', 'bod', 'bos', 'bre', 'bul', 'cat', 'ces', 'cha', 'che', 'chu', 'chv', 'cor', 'cos', 'cre', 'cym', 'dan', 'deu', 'div', 'dzo', 'ell', 'eng', 'epo', 'est', 'eus', 'ewe', 'fao', 'fas', 'fij', 'fin', 'fra', 'fry', 'ful', 'gla', 'gle', 'glg', 'glv', 'grn', 'guj', 'hat', 'hau', 'hbs', 'heb', 'her', 'hin', 'hmo', 'hrv', 'hun', 'hye', 'ibo', 'ido', 'iii', 'iku', 'ile', 'ina', 'ind', 'ipk', 'isl', 'ita', 'jav', 'jpn', 'kal', 'kan', 'kas', 'kat', 'kau', 'kaz', 'khm', 'kik', 'kin', 'kir', 'kom', 'kon', 'kor', 'kua', 'kur', 'lao', 'lat', 'lav', 'lim', 'lin', 'lit', 'ltz', 'lub', 'lug', 'mah', 'mal', 'mar', 'mkd', 'mlg', 'mlt', 'mon', 'mri', 'msa', 'mya', 'nau', 'nav', 'nbl', 'nde', 'ndo', 'nep', 'nld', 'nno', 'nob', 'nor', 'nya', 'oci', 'oji', 'ori', 'orm', 'oss', 'pan', 'pli', 'pol', 'por', 'pus', 'que', 'roh', 'ron', 'run', 'rus', 'sag', 'san', 'sin', 'slk', 'slv', 'sme', 'smo', 'sna', 'snd', 'som', 'sot', 'spa', 'sqi', 'srd', 'srp', 'ssw', 'sun', 'swa', 'swe', 'tah', 'tam', 'tat', 'tel', 'tgk', 'tgl', 'tha', 'tir', 'ton', 'tsn', 'tso', 'tuk', 'tur', 'twi', 'uig', 'ukr', 'urd', 'uzb', 'ven', 'vie', 'vol', 'wln', 'wol', 'xho', 'yid', 'yor', 'zha', 'zho', 'zul']).describe('Language of the metadata expressed using ISO 639-3.'),
  "modified": zod.iso.datetime({}).describe('Must be set each time DMP is modified. Indicates DMP version. Encoded using the relevant ISO 8601 Date and Time (with timezone) compliant string.'),
  "project": zod.array(zod.object({
  "description": zod.string().optional().describe('Project description'),
  "end": zod.iso.date().optional().describe('Project end date. Encoded using the relevant ISO 8601 Date compliant string.'),
  "funding": zod.array(zod.object({
  "funder_id": zod.object({
  "identifier": zod.string().describe('Funder ID, recommended to use CrossRef Funder Registry. See: https://www.crossref.org/services/funder-registry/'),
  "type": zod.enum(['fundref', 'url', 'other']).describe('Identifier type. Allowed values: fundref, url, other')
}).describe('Funder ID of the associated project'),
  "funding_status": zod.enum(['planned', 'applied', 'granted', 'rejected']).optional().describe('To express different phases of project lifecycle. Allowed values: planned, applied, granted, rejected'),
  "grant_id": zod.object({
  "identifier": zod.string().describe('Grant ID'),
  "type": zod.enum(['url', 'other']).describe('Identifier type. Allowed values: url, other')
}).optional().describe('Grant ID of the associated project')
})).optional().describe('Funding related with a project'),
  "start": zod.iso.date().optional().describe('Project start date. Encoded using the relevant ISO 8601 Date compliant string.'),
  "title": zod.string().describe('Project title')
})).optional().describe('Project related to a DMP'),
  "title": zod.string().describe('Title of a DMP')
}).optional()
}).and(zod.object({
  "id": zod.string()
}))


/**
 * Delete a DMP based on its ID.
 * @summary Delete a DMP
 */
export const deleteDMPParams = zod.object({
  "id": zod.string()
})


export const getListDMPsResponseMock = (overrideResponse: Partial< DMPListResponseResponse > = {}): DMPListResponseResponse => ({total_count: faker.number.int({min: 0, max: undefined}), items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({...{dmp: faker.helpers.arrayElement([{contact: {contact_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(ContactIDType))}, mbox: faker.internet.email(), name: faker.string.alpha({length: {min: 10, max: 20}})}, contributor: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({contributor_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(ContributorIDType))}, mbox: faker.helpers.arrayElement([faker.internet.email(), undefined]), name: faker.string.alpha({length: {min: 10, max: 20}}), role: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}})))})), undefined]), cost: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({currency_code: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(CurrencyCode)), undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}}), value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined])})), undefined]), created: `${faker.date.past().toISOString().split('.')[0]}Z`, dataset: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({data_quality_assurance: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined]), dataset_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(DatasetIDType))}, description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), distribution: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({access_url: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), available_until: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), byte_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), data_access: faker.helpers.arrayElement(Object.values(DataAccess)), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), download_url: faker.helpers.arrayElement([faker.internet.url(), undefined]), format: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined]), host: faker.helpers.arrayElement([{availability: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), backup_frequency: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), backup_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), certified_with: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Certification)), undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), geo_location: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(CountryCode)), undefined]), pid_system: faker.helpers.arrayElement([faker.helpers.arrayElements(Object.values(PidSystemType)), undefined]), storage_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), support_versioning: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Booleanish)), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}}), url: faker.internet.url()}, undefined]), license: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({license_ref: faker.internet.url(), start_date: faker.date.past().toISOString().split('T')[0]})), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}})})), undefined]), is_reused: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), issued: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), keyword: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined]), language: faker.helpers.arrayElement([faker.helpers.arrayElement(['aar','abk','afr','aka','amh','ara','arg','asm','ava','ave','aym','aze','bak','bam','bel','ben','bih','bis','bod','bos','bre','bul','cat','ces','cha','che','chu','chv','cor','cos','cre','cym','dan','deu','div','dzo','ell','eng','epo','est','eus','ewe','fao','fas','fij','fin','fra','fry','ful','gla','gle','glg','glv','grn','guj','hat','hau','hbs','heb','her','hin','hmo','hrv','hun','hye','ibo','ido','iii','iku','ile','ina','ind','ipk','isl','ita','jav','jpn','kal','kan','kas','kat','kau','kaz','khm','kik','kin','kir','kom','kon','kor','kua','kur','lao','lat','lav','lim','lin','lit','ltz','lub','lug','mah','mal','mar','mkd','mlg','mlt','mon','mri','msa','mya','nau','nav','nbl','nde','ndo','nep','nld','nno','nob','nor','nya','oci','oji','ori','orm','oss','pan','pli','pol','por','pus','que','roh','ron','run','rus','sag','san','sin','slk','slv','sme','smo','sna','snd','som','sot','spa','sqi','srd','srp','ssw','sun','swa','swe','tah','tam','tat','tel','tgk','tgl','tha','tir','ton','tsn','tso','tuk','tur','twi','uig','ukr','urd','uzb','ven','vie','vol','wln','wol','xho','yid','yor','zha','zho','zul'] as const), undefined]), metadata: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), language: faker.helpers.arrayElement(Object.values(LanguageID)), metadata_standard_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(MetadataStandardIDType))}})), undefined]), personal_data: faker.helpers.arrayElement(['yes','no','unknown'] as const), preservation_statement: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), security_and_privacy: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}})})), undefined]), sensitive_data: faker.helpers.arrayElement(['yes','no','unknown'] as const), technical_resource: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), name: faker.string.alpha({length: {min: 10, max: 20}})})), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), dmp_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(DMPIDType))}, ethical_issues_description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), ethical_issues_exist: faker.helpers.arrayElement(Object.values(Booleanish)), ethical_issues_report: faker.helpers.arrayElement([faker.internet.url(), undefined]), language: faker.helpers.arrayElement(Object.values(LanguageID)), modified: `${faker.date.past().toISOString().split('.')[0]}Z`, project: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), end: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), funding: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({funder_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(FunderIDType))}, funding_status: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(FundingStatus)), undefined]), grant_id: faker.helpers.arrayElement([{identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(GrantIDType))}, undefined])})), undefined]), start: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), title: faker.string.alpha({length: {min: 10, max: 20}})})), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}})}, undefined])},...{id: faker.string.alpha({length: {min: 10, max: 20}})},})), ...overrideResponse})

export const getCreateDMPResponseMock = (): DMPWithID => ({...{dmp: faker.helpers.arrayElement([{contact: {contact_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(ContactIDType))}, mbox: faker.internet.email(), name: faker.string.alpha({length: {min: 10, max: 20}})}, contributor: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({contributor_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(ContributorIDType))}, mbox: faker.helpers.arrayElement([faker.internet.email(), undefined]), name: faker.string.alpha({length: {min: 10, max: 20}}), role: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}})))})), undefined]), cost: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({currency_code: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(CurrencyCode)), undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}}), value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined])})), undefined]), created: `${faker.date.past().toISOString().split('.')[0]}Z`, dataset: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({data_quality_assurance: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined]), dataset_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(DatasetIDType))}, description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), distribution: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({access_url: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), available_until: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), byte_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), data_access: faker.helpers.arrayElement(Object.values(DataAccess)), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), download_url: faker.helpers.arrayElement([faker.internet.url(), undefined]), format: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined]), host: faker.helpers.arrayElement([{availability: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), backup_frequency: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), backup_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), certified_with: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Certification)), undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), geo_location: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(CountryCode)), undefined]), pid_system: faker.helpers.arrayElement([faker.helpers.arrayElements(Object.values(PidSystemType)), undefined]), storage_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), support_versioning: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Booleanish)), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}}), url: faker.internet.url()}, undefined]), license: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({license_ref: faker.internet.url(), start_date: faker.date.past().toISOString().split('T')[0]})), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}})})), undefined]), is_reused: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), issued: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), keyword: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined]), language: faker.helpers.arrayElement([faker.helpers.arrayElement(['aar','abk','afr','aka','amh','ara','arg','asm','ava','ave','aym','aze','bak','bam','bel','ben','bih','bis','bod','bos','bre','bul','cat','ces','cha','che','chu','chv','cor','cos','cre','cym','dan','deu','div','dzo','ell','eng','epo','est','eus','ewe','fao','fas','fij','fin','fra','fry','ful','gla','gle','glg','glv','grn','guj','hat','hau','hbs','heb','her','hin','hmo','hrv','hun','hye','ibo','ido','iii','iku','ile','ina','ind','ipk','isl','ita','jav','jpn','kal','kan','kas','kat','kau','kaz','khm','kik','kin','kir','kom','kon','kor','kua','kur','lao','lat','lav','lim','lin','lit','ltz','lub','lug','mah','mal','mar','mkd','mlg','mlt','mon','mri','msa','mya','nau','nav','nbl','nde','ndo','nep','nld','nno','nob','nor','nya','oci','oji','ori','orm','oss','pan','pli','pol','por','pus','que','roh','ron','run','rus','sag','san','sin','slk','slv','sme','smo','sna','snd','som','sot','spa','sqi','srd','srp','ssw','sun','swa','swe','tah','tam','tat','tel','tgk','tgl','tha','tir','ton','tsn','tso','tuk','tur','twi','uig','ukr','urd','uzb','ven','vie','vol','wln','wol','xho','yid','yor','zha','zho','zul'] as const), undefined]), metadata: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), language: faker.helpers.arrayElement(Object.values(LanguageID)), metadata_standard_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(MetadataStandardIDType))}})), undefined]), personal_data: faker.helpers.arrayElement(['yes','no','unknown'] as const), preservation_statement: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), security_and_privacy: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}})})), undefined]), sensitive_data: faker.helpers.arrayElement(['yes','no','unknown'] as const), technical_resource: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), name: faker.string.alpha({length: {min: 10, max: 20}})})), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), dmp_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(DMPIDType))}, ethical_issues_description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), ethical_issues_exist: faker.helpers.arrayElement(Object.values(Booleanish)), ethical_issues_report: faker.helpers.arrayElement([faker.internet.url(), undefined]), language: faker.helpers.arrayElement(Object.values(LanguageID)), modified: `${faker.date.past().toISOString().split('.')[0]}Z`, project: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), end: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), funding: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({funder_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(FunderIDType))}, funding_status: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(FundingStatus)), undefined]), grant_id: faker.helpers.arrayElement([{identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(GrantIDType))}, undefined])})), undefined]), start: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), title: faker.string.alpha({length: {min: 10, max: 20}})})), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}})}, undefined])},...{id: faker.string.alpha({length: {min: 10, max: 20}})},})

export const getGetDMPResponseMock = (): DMPWithID => ({...{dmp: faker.helpers.arrayElement([{contact: {contact_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(ContactIDType))}, mbox: faker.internet.email(), name: faker.string.alpha({length: {min: 10, max: 20}})}, contributor: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({contributor_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(ContributorIDType))}, mbox: faker.helpers.arrayElement([faker.internet.email(), undefined]), name: faker.string.alpha({length: {min: 10, max: 20}}), role: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}})))})), undefined]), cost: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({currency_code: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(CurrencyCode)), undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}}), value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined])})), undefined]), created: `${faker.date.past().toISOString().split('.')[0]}Z`, dataset: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({data_quality_assurance: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined]), dataset_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(DatasetIDType))}, description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), distribution: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({access_url: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), available_until: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), byte_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), data_access: faker.helpers.arrayElement(Object.values(DataAccess)), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), download_url: faker.helpers.arrayElement([faker.internet.url(), undefined]), format: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined]), host: faker.helpers.arrayElement([{availability: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), backup_frequency: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), backup_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), certified_with: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Certification)), undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), geo_location: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(CountryCode)), undefined]), pid_system: faker.helpers.arrayElement([faker.helpers.arrayElements(Object.values(PidSystemType)), undefined]), storage_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), support_versioning: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Booleanish)), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}}), url: faker.internet.url()}, undefined]), license: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({license_ref: faker.internet.url(), start_date: faker.date.past().toISOString().split('T')[0]})), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}})})), undefined]), is_reused: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), issued: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), keyword: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined]), language: faker.helpers.arrayElement([faker.helpers.arrayElement(['aar','abk','afr','aka','amh','ara','arg','asm','ava','ave','aym','aze','bak','bam','bel','ben','bih','bis','bod','bos','bre','bul','cat','ces','cha','che','chu','chv','cor','cos','cre','cym','dan','deu','div','dzo','ell','eng','epo','est','eus','ewe','fao','fas','fij','fin','fra','fry','ful','gla','gle','glg','glv','grn','guj','hat','hau','hbs','heb','her','hin','hmo','hrv','hun','hye','ibo','ido','iii','iku','ile','ina','ind','ipk','isl','ita','jav','jpn','kal','kan','kas','kat','kau','kaz','khm','kik','kin','kir','kom','kon','kor','kua','kur','lao','lat','lav','lim','lin','lit','ltz','lub','lug','mah','mal','mar','mkd','mlg','mlt','mon','mri','msa','mya','nau','nav','nbl','nde','ndo','nep','nld','nno','nob','nor','nya','oci','oji','ori','orm','oss','pan','pli','pol','por','pus','que','roh','ron','run','rus','sag','san','sin','slk','slv','sme','smo','sna','snd','som','sot','spa','sqi','srd','srp','ssw','sun','swa','swe','tah','tam','tat','tel','tgk','tgl','tha','tir','ton','tsn','tso','tuk','tur','twi','uig','ukr','urd','uzb','ven','vie','vol','wln','wol','xho','yid','yor','zha','zho','zul'] as const), undefined]), metadata: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), language: faker.helpers.arrayElement(Object.values(LanguageID)), metadata_standard_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(MetadataStandardIDType))}})), undefined]), personal_data: faker.helpers.arrayElement(['yes','no','unknown'] as const), preservation_statement: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), security_and_privacy: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}})})), undefined]), sensitive_data: faker.helpers.arrayElement(['yes','no','unknown'] as const), technical_resource: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), name: faker.string.alpha({length: {min: 10, max: 20}})})), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), dmp_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(DMPIDType))}, ethical_issues_description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), ethical_issues_exist: faker.helpers.arrayElement(Object.values(Booleanish)), ethical_issues_report: faker.helpers.arrayElement([faker.internet.url(), undefined]), language: faker.helpers.arrayElement(Object.values(LanguageID)), modified: `${faker.date.past().toISOString().split('.')[0]}Z`, project: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), end: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), funding: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({funder_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(FunderIDType))}, funding_status: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(FundingStatus)), undefined]), grant_id: faker.helpers.arrayElement([{identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(GrantIDType))}, undefined])})), undefined]), start: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), title: faker.string.alpha({length: {min: 10, max: 20}})})), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}})}, undefined])},...{id: faker.string.alpha({length: {min: 10, max: 20}})},})

export const getPutDMPResponseMock = (): DMPWithID => ({...{dmp: faker.helpers.arrayElement([{contact: {contact_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(ContactIDType))}, mbox: faker.internet.email(), name: faker.string.alpha({length: {min: 10, max: 20}})}, contributor: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({contributor_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(ContributorIDType))}, mbox: faker.helpers.arrayElement([faker.internet.email(), undefined]), name: faker.string.alpha({length: {min: 10, max: 20}}), role: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}})))})), undefined]), cost: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({currency_code: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(CurrencyCode)), undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}}), value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined])})), undefined]), created: `${faker.date.past().toISOString().split('.')[0]}Z`, dataset: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({data_quality_assurance: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined]), dataset_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(DatasetIDType))}, description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), distribution: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({access_url: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), available_until: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), byte_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), data_access: faker.helpers.arrayElement(Object.values(DataAccess)), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), download_url: faker.helpers.arrayElement([faker.internet.url(), undefined]), format: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined]), host: faker.helpers.arrayElement([{availability: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), backup_frequency: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), backup_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), certified_with: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Certification)), undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), geo_location: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(CountryCode)), undefined]), pid_system: faker.helpers.arrayElement([faker.helpers.arrayElements(Object.values(PidSystemType)), undefined]), storage_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), support_versioning: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Booleanish)), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}}), url: faker.internet.url()}, undefined]), license: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({license_ref: faker.internet.url(), start_date: faker.date.past().toISOString().split('T')[0]})), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}})})), undefined]), is_reused: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), issued: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), keyword: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined]), language: faker.helpers.arrayElement([faker.helpers.arrayElement(['aar','abk','afr','aka','amh','ara','arg','asm','ava','ave','aym','aze','bak','bam','bel','ben','bih','bis','bod','bos','bre','bul','cat','ces','cha','che','chu','chv','cor','cos','cre','cym','dan','deu','div','dzo','ell','eng','epo','est','eus','ewe','fao','fas','fij','fin','fra','fry','ful','gla','gle','glg','glv','grn','guj','hat','hau','hbs','heb','her','hin','hmo','hrv','hun','hye','ibo','ido','iii','iku','ile','ina','ind','ipk','isl','ita','jav','jpn','kal','kan','kas','kat','kau','kaz','khm','kik','kin','kir','kom','kon','kor','kua','kur','lao','lat','lav','lim','lin','lit','ltz','lub','lug','mah','mal','mar','mkd','mlg','mlt','mon','mri','msa','mya','nau','nav','nbl','nde','ndo','nep','nld','nno','nob','nor','nya','oci','oji','ori','orm','oss','pan','pli','pol','por','pus','que','roh','ron','run','rus','sag','san','sin','slk','slv','sme','smo','sna','snd','som','sot','spa','sqi','srd','srp','ssw','sun','swa','swe','tah','tam','tat','tel','tgk','tgl','tha','tir','ton','tsn','tso','tuk','tur','twi','uig','ukr','urd','uzb','ven','vie','vol','wln','wol','xho','yid','yor','zha','zho','zul'] as const), undefined]), metadata: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), language: faker.helpers.arrayElement(Object.values(LanguageID)), metadata_standard_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(MetadataStandardIDType))}})), undefined]), personal_data: faker.helpers.arrayElement(['yes','no','unknown'] as const), preservation_statement: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), security_and_privacy: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}})})), undefined]), sensitive_data: faker.helpers.arrayElement(['yes','no','unknown'] as const), technical_resource: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), name: faker.string.alpha({length: {min: 10, max: 20}})})), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), dmp_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(DMPIDType))}, ethical_issues_description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), ethical_issues_exist: faker.helpers.arrayElement(Object.values(Booleanish)), ethical_issues_report: faker.helpers.arrayElement([faker.internet.url(), undefined]), language: faker.helpers.arrayElement(Object.values(LanguageID)), modified: `${faker.date.past().toISOString().split('.')[0]}Z`, project: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), end: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), funding: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({funder_id: {identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(FunderIDType))}, funding_status: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(FundingStatus)), undefined]), grant_id: faker.helpers.arrayElement([{identifier: faker.string.alpha({length: {min: 10, max: 20}}), type: faker.helpers.arrayElement(Object.values(GrantIDType))}, undefined])})), undefined]), start: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), title: faker.string.alpha({length: {min: 10, max: 20}})})), undefined]), title: faker.string.alpha({length: {min: 10, max: 20}})}, undefined])},...{id: faker.string.alpha({length: {min: 10, max: 20}})},})


export const getListDMPsMockHandler = (overrideResponse?: DMPListResponseResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<DMPListResponseResponse> | DMPListResponseResponse)) => {
  return http.get('*/dmps', async (info) => {await delay(1000);

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getListDMPsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateDMPMockHandler = (overrideResponse?: DMPWithID | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DMPWithID> | DMPWithID)) => {
  return http.post('*/dmps', async (info) => {await delay(1000);

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getCreateDMPResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetDMPMockHandler = (overrideResponse?: DMPWithID | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<DMPWithID> | DMPWithID)) => {
  return http.get('*/dmps/:id', async (info) => {await delay(1000);

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetDMPResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutDMPMockHandler = (overrideResponse?: DMPWithID | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<DMPWithID> | DMPWithID)) => {
  return http.put('*/dmps/:id', async (info) => {await delay(1000);

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPutDMPResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteDMPMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/dmps/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,

      })
  })
}
export const getCommonMachineActionableDMPAPIMock = () => [
  getListDMPsMockHandler(),
  getCreateDMPMockHandler(),
  getGetDMPMockHandler(),
  getPutDMPMockHandler(),
  getDeleteDMPMockHandler()
]

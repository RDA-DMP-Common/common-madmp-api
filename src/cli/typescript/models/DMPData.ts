/**
 * Common Machine-Actionable DMP API
 * This API provides access to Data Management Plans in a machine-readable format. You can use this API to perform automated analysis or other integration. Please note that this API may not give you all information stored in the system implementing it as this standard is intended as a common baseline among multiple DMP platform vendors.  # Schema extension  This API supports extending the standard by using content negotiation. The MIME types used for content negotiation *should* follow the vendor tree naming defined in [RFC 6838 Section 3.2](https://datatracker.ietf.org/doc/html/rfc6838#section-3.2) and make use of the media type suffixes defined in [RFC6839](https://www.rfc-editor.org/rfc/rfc6839). The vendor prefix should be chosen such that the vendor is clearly identifiable. For example:  ``` application/vnd.com.example.dmp+json ```  Clients *should* send an `Accept` header with their preferred MIME types. The server *must* order the contents of the `Accept` header correctly and select the standard with the highest client preference. (See the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Accept) for a detailed explanation on this header.)  If the client sends no `Accept` header or sends an unqualified `application/json` request, the server *may* select the \"stock\" schema represented in this document or may select an extended schema only if the extended schema fully adheres to this standard with only extra added fields, but no existing fields removed or modified. In this case, the server *must* respond with the `application/json` content type. Clients *should* not rely on receiving an extended schema document when sending an `application/json` request and *should* prefer sending a qualified MIME type.  The correct MIME-type for the DMP standard used in this specification is:  ``` application/vnd.org.rd-alliance.dmp-common.v1.2+json ```  Client and server implementations *may* agree on a different serialization to JSON, such as XML, by specifying the corresponding suffix. Clients and servers *must* support JSON serialization.  # Conflict resolution  This API makes use of the `Last-Modified` headers in order to resolve conflicts. When updating a DMP, consider passing the `Last-Modified` header from the response in the `If-Unmodified-Since` header in the PUT request. If the DMP has been modified since you last fetched the data, the server will return a 409 header.  Server implementations should always update the modified field of the DMP to the server time on PUT and return it in the `Last-Modified` header. On PUT, server implementations should compare the `If-Unmodified-Since` header with the stored modified field. 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Booleanish } from '../models/Booleanish';
import { Contact } from '../models/Contact';
import { Contributor } from '../models/Contributor';
import { Cost } from '../models/Cost';
import { DMPID } from '../models/DMPID';
import { Dataset } from '../models/Dataset';
import { LanguageID } from '../models/LanguageID';
import { Project } from '../models/Project';
import { HttpFile } from '../http/http';

export class DMPData {
    'contact': Contact;
    'contributor'?: Array<Contributor>;
    'cost'?: Array<Cost>;
    /**
    * Date and time of the first version of a DMP. Must not be changed in subsequent DMPs. Encoded using the relevant ISO 8601 Date and Time (with timezone) compliant string
    */
    'created': Date;
    'dataset': Array<Dataset>;
    /**
    * To provide any free-form text information on a DMP
    */
    'description'?: string;
    'dmpId': DMPID;
    /**
    * To describe ethical issues directly in a DMP
    */
    'ethicalIssuesDescription'?: string;
    'ethicalIssuesExist': Booleanish;
    /**
    * To indicate where a protocol from a meeting with an ethical commitee can be found
    */
    'ethicalIssuesReport'?: string;
    'language': LanguageID;
    /**
    * Must be set each time DMP is modified. Indicates DMP version. Encoded using the relevant ISO 8601 Date and Time (with timezone) compliant string.
    */
    'modified': Date;
    /**
    * Project related to a DMP
    */
    'project'?: Array<Project>;
    /**
    * Title of a DMP
    */
    'title': string;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "contact",
            "baseName": "contact",
            "type": "Contact",
            "format": ""
        },
        {
            "name": "contributor",
            "baseName": "contributor",
            "type": "Array<Contributor>",
            "format": ""
        },
        {
            "name": "cost",
            "baseName": "cost",
            "type": "Array<Cost>",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "dataset",
            "baseName": "dataset",
            "type": "Array<Dataset>",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "dmpId",
            "baseName": "dmp_id",
            "type": "DMPID",
            "format": ""
        },
        {
            "name": "ethicalIssuesDescription",
            "baseName": "ethical_issues_description",
            "type": "string",
            "format": ""
        },
        {
            "name": "ethicalIssuesExist",
            "baseName": "ethical_issues_exist",
            "type": "Booleanish",
            "format": ""
        },
        {
            "name": "ethicalIssuesReport",
            "baseName": "ethical_issues_report",
            "type": "string",
            "format": "url"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "LanguageID",
            "format": ""
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "project",
            "baseName": "project",
            "type": "Array<Project>",
            "format": ""
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return DMPData.attributeTypeMap;
    }

    public constructor() {
    }
}


